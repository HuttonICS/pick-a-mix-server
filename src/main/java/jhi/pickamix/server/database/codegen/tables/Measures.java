/*
 * This file is generated by jOOQ.
 */
package jhi.pickamix.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.pickamix.server.database.codegen.PickamixDb;
import jhi.pickamix.server.database.codegen.enums.MeasuresDatatype;
import jhi.pickamix.server.database.codegen.tables.records.MeasuresRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measures extends TableImpl<MeasuresRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pickamix_db.measures</code>
     */
    public static final Measures MEASURES = new Measures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeasuresRecord> getRecordType() {
        return MeasuresRecord.class;
    }

    /**
     * The column <code>pickamix_db.measures.id</code>.
     */
    public final TableField<MeasuresRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pickamix_db.measures.name</code>.
     */
    public final TableField<MeasuresRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>pickamix_db.measures.description</code>.
     */
    public final TableField<MeasuresRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pickamix_db.measures.icon</code>.
     */
    public final TableField<MeasuresRecord, String> ICON = createField(DSL.name("icon"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pickamix_db.measures.datatype</code>.
     */
    public final TableField<MeasuresRecord, MeasuresDatatype> DATATYPE = createField(DSL.name("datatype"), SQLDataType.VARCHAR(6).nullable(false).defaultValue(DSL.inline("text", SQLDataType.VARCHAR)).asEnumDataType(jhi.pickamix.server.database.codegen.enums.MeasuresDatatype.class), this, "");

    /**
     * The column <code>pickamix_db.measures.created_on</code>.
     */
    public final TableField<MeasuresRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>pickamix_db.measures.updated_on</code>.
     */
    public final TableField<MeasuresRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Measures(Name alias, Table<MeasuresRecord> aliased) {
        this(alias, aliased, null);
    }

    private Measures(Name alias, Table<MeasuresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pickamix_db.measures</code> table reference
     */
    public Measures(String alias) {
        this(DSL.name(alias), MEASURES);
    }

    /**
     * Create an aliased <code>pickamix_db.measures</code> table reference
     */
    public Measures(Name alias) {
        this(alias, MEASURES);
    }

    /**
     * Create a <code>pickamix_db.measures</code> table reference
     */
    public Measures() {
        this(DSL.name("measures"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PickamixDb.PICKAMIX_DB;
    }

    @Override
    public Identity<MeasuresRecord, Integer> getIdentity() {
        return (Identity<MeasuresRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeasuresRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Measures.MEASURES, DSL.name("KEY_measures_PRIMARY"), new TableField[] { Measures.MEASURES.ID }, true);
    }

    @Override
    public Measures as(String alias) {
        return new Measures(DSL.name(alias), this);
    }

    @Override
    public Measures as(Name alias) {
        return new Measures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Measures rename(String name) {
        return new Measures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measures rename(Name name) {
        return new Measures(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, MeasuresDatatype, Timestamp, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
    // @formatter:on
}
