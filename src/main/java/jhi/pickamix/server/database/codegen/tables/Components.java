/*
 * This file is generated by jOOQ.
 */
package jhi.pickamix.server.database.codegen.tables;


import java.sql.Timestamp;

import jhi.pickamix.server.database.codegen.PickamixDb;
import jhi.pickamix.server.database.codegen.tables.records.ComponentsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Components extends TableImpl<ComponentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pickamix_db.components</code>
     */
    public static final Components COMPONENTS = new Components();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComponentsRecord> getRecordType() {
        return ComponentsRecord.class;
    }

    /**
     * The column <code>pickamix_db.components.id</code>.
     */
    public final TableField<ComponentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pickamix_db.components.crop</code>.
     */
    public final TableField<ComponentsRecord, String> CROP = createField(DSL.name("crop"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>pickamix_db.components.variety</code>.
     */
    public final TableField<ComponentsRecord, String> VARIETY = createField(DSL.name("variety"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>pickamix_db.components.created_on</code>.
     */
    public final TableField<ComponentsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>pickamix_db.components.updated_on</code>.
     */
    public final TableField<ComponentsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Components(Name alias, Table<ComponentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Components(Name alias, Table<ComponentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pickamix_db.components</code> table reference
     */
    public Components(String alias) {
        this(DSL.name(alias), COMPONENTS);
    }

    /**
     * Create an aliased <code>pickamix_db.components</code> table reference
     */
    public Components(Name alias) {
        this(alias, COMPONENTS);
    }

    /**
     * Create a <code>pickamix_db.components</code> table reference
     */
    public Components() {
        this(DSL.name("components"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PickamixDb.PICKAMIX_DB;
    }

    @Override
    public Identity<ComponentsRecord, Integer> getIdentity() {
        return (Identity<ComponentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ComponentsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Components.COMPONENTS, DSL.name("KEY_components_PRIMARY"), new TableField[] { Components.COMPONENTS.ID }, true);
    }

    @Override
    public Components as(String alias) {
        return new Components(DSL.name(alias), this);
    }

    @Override
    public Components as(Name alias) {
        return new Components(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Components rename(String name) {
        return new Components(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Components rename(Name name) {
        return new Components(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
    // @formatter:on
}
