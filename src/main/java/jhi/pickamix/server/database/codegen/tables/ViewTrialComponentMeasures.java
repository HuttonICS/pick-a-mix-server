/*
 * This file is generated by jOOQ.
 */
package jhi.pickamix.server.database.codegen.tables;


import jhi.pickamix.server.database.codegen.PickamixDb;
import jhi.pickamix.server.database.codegen.enums.ViewTrialComponentMeasuresMeasureDatatype;
import jhi.pickamix.server.database.codegen.enums.ViewTrialComponentMeasuresPlotMeasurementType;
import jhi.pickamix.server.database.codegen.tables.records.ViewTrialComponentMeasuresRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTrialComponentMeasures extends TableImpl<ViewTrialComponentMeasuresRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pickamix_db.view_trial_component_measures</code>
     */
    public static final ViewTrialComponentMeasures VIEW_TRIAL_COMPONENT_MEASURES = new ViewTrialComponentMeasures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTrialComponentMeasuresRecord> getRecordType() {
        return ViewTrialComponentMeasuresRecord.class;
    }

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.component_id</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, Integer> COMPONENT_ID = createField(DSL.name("component_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.component_crop</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, String> COMPONENT_CROP = createField(DSL.name("component_crop"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.component_variety</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, String> COMPONENT_VARIETY = createField(DSL.name("component_variety"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.measure_id</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, Integer> MEASURE_ID = createField(DSL.name("measure_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.measure_name</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, String> MEASURE_NAME = createField(DSL.name("measure_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.measure_datatype</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, ViewTrialComponentMeasuresMeasureDatatype> MEASURE_DATATYPE = createField(DSL.name("measure_datatype"), SQLDataType.VARCHAR(6).defaultValue(DSL.inline("text", SQLDataType.VARCHAR)).asEnumDataType(jhi.pickamix.server.database.codegen.enums.ViewTrialComponentMeasuresMeasureDatatype.class), this, "");

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.plot_measurement_type</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, ViewTrialComponentMeasuresPlotMeasurementType> PLOT_MEASUREMENT_TYPE = createField(DSL.name("plot_measurement_type"), SQLDataType.VARCHAR(4).defaultValue(DSL.inline("mono", SQLDataType.VARCHAR)).asEnumDataType(jhi.pickamix.server.database.codegen.enums.ViewTrialComponentMeasuresPlotMeasurementType.class), this, "");

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.measure_value</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, String> MEASURE_VALUE = createField(DSL.name("measure_value"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.trial_id</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, Integer> TRIAL_ID = createField(DSL.name("trial_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>pickamix_db.view_trial_component_measures.trial_name</code>.
     */
    public final TableField<ViewTrialComponentMeasuresRecord, String> TRIAL_NAME = createField(DSL.name("trial_name"), SQLDataType.VARCHAR(255), this, "");

    private ViewTrialComponentMeasures(Name alias, Table<ViewTrialComponentMeasuresRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTrialComponentMeasures(Name alias, Table<ViewTrialComponentMeasuresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_trial_component_measures` as select `pick_a_mix`.`components`.`id` AS `component_id`,`pick_a_mix`.`components`.`crop` AS `component_crop`,`pick_a_mix`.`components`.`variety` AS `component_variety`,`pick_a_mix`.`measures`.`id` AS `measure_id`,`pick_a_mix`.`measures`.`name` AS `measure_name`,`pick_a_mix`.`measures`.`datatype` AS `measure_datatype`,`pick_a_mix`.`plots`.`measurement_type` AS `plot_measurement_type`,`pick_a_mix`.`plot_measures`.`value` AS `measure_value`,`pick_a_mix`.`trials`.`id` AS `trial_id`,`pick_a_mix`.`trials`.`name` AS `trial_name` from (((((`pick_a_mix`.`components` left join `pick_a_mix`.`plot_components` on((`pick_a_mix`.`plot_components`.`component_id` = `pick_a_mix`.`components`.`id`))) left join `pick_a_mix`.`plots` on((`pick_a_mix`.`plots`.`id` = `pick_a_mix`.`plot_components`.`plot_id`))) left join `pick_a_mix`.`trials` on((`pick_a_mix`.`trials`.`id` = `pick_a_mix`.`plots`.`trial_id`))) left join `pick_a_mix`.`plot_measures` on((`pick_a_mix`.`plots`.`id` = `pick_a_mix`.`plot_measures`.`plot_id`))) left join `pick_a_mix`.`measures` on((`pick_a_mix`.`measures`.`id` = `pick_a_mix`.`plot_measures`.`measure_id`))) where (`pick_a_mix`.`measures`.`id` is not null) order by `pick_a_mix`.`components`.`crop`,`pick_a_mix`.`components`.`variety`"));
    }

    /**
     * Create an aliased <code>pickamix_db.view_trial_component_measures</code>
     * table reference
     */
    public ViewTrialComponentMeasures(String alias) {
        this(DSL.name(alias), VIEW_TRIAL_COMPONENT_MEASURES);
    }

    /**
     * Create an aliased <code>pickamix_db.view_trial_component_measures</code>
     * table reference
     */
    public ViewTrialComponentMeasures(Name alias) {
        this(alias, VIEW_TRIAL_COMPONENT_MEASURES);
    }

    /**
     * Create a <code>pickamix_db.view_trial_component_measures</code> table
     * reference
     */
    public ViewTrialComponentMeasures() {
        this(DSL.name("view_trial_component_measures"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PickamixDb.PICKAMIX_DB;
    }

    @Override
    public ViewTrialComponentMeasures as(String alias) {
        return new ViewTrialComponentMeasures(DSL.name(alias), this);
    }

    @Override
    public ViewTrialComponentMeasures as(Name alias) {
        return new ViewTrialComponentMeasures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTrialComponentMeasures rename(String name) {
        return new ViewTrialComponentMeasures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTrialComponentMeasures rename(Name name) {
        return new ViewTrialComponentMeasures(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, Integer, String, ViewTrialComponentMeasuresMeasureDatatype, ViewTrialComponentMeasuresPlotMeasurementType, String, Integer, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
    // @formatter:on
}
