/*
 * This file is generated by jOOQ.
 */
package jhi.pickamix.server.database.codegen.tables;


import jhi.pickamix.server.database.codegen.PickamixDb;
import jhi.pickamix.server.database.codegen.tables.records.PlotComponentsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlotComponents extends TableImpl<PlotComponentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pickamix_db.plot_components</code>
     */
    public static final PlotComponents PLOT_COMPONENTS = new PlotComponents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlotComponentsRecord> getRecordType() {
        return PlotComponentsRecord.class;
    }

    /**
     * The column <code>pickamix_db.plot_components.plot_id</code>.
     */
    public final TableField<PlotComponentsRecord, Integer> PLOT_ID = createField(DSL.name("plot_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pickamix_db.plot_components.component_id</code>.
     */
    public final TableField<PlotComponentsRecord, Integer> COMPONENT_ID = createField(DSL.name("component_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PlotComponents(Name alias, Table<PlotComponentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlotComponents(Name alias, Table<PlotComponentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pickamix_db.plot_components</code> table
     * reference
     */
    public PlotComponents(String alias) {
        this(DSL.name(alias), PLOT_COMPONENTS);
    }

    /**
     * Create an aliased <code>pickamix_db.plot_components</code> table
     * reference
     */
    public PlotComponents(Name alias) {
        this(alias, PLOT_COMPONENTS);
    }

    /**
     * Create a <code>pickamix_db.plot_components</code> table reference
     */
    public PlotComponents() {
        this(DSL.name("plot_components"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PickamixDb.PICKAMIX_DB;
    }

    @Override
    public UniqueKey<PlotComponentsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(PlotComponents.PLOT_COMPONENTS, DSL.name("KEY_plot_components_PRIMARY"), new TableField[] { PlotComponents.PLOT_COMPONENTS.PLOT_ID, PlotComponents.PLOT_COMPONENTS.COMPONENT_ID }, true);
    }

    @Override
    public PlotComponents as(String alias) {
        return new PlotComponents(DSL.name(alias), this);
    }

    @Override
    public PlotComponents as(Name alias) {
        return new PlotComponents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlotComponents rename(String name) {
        return new PlotComponents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlotComponents rename(Name name) {
        return new PlotComponents(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
    // @formatter:on
}
